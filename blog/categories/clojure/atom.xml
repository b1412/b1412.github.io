<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: clojure | Leon's Blog]]></title>
  <link href="http://blog.kidzhou.me/blog/categories/clojure/atom.xml" rel="self"/>
  <link href="http://blog.kidzhou.me/"/>
  <updated>2019-11-04T17:55:40+13:00</updated>
  <id>http://blog.kidzhou.me/</id>
  <author>
    <name><![CDATA[Leon Zhou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Clojure Practice in 'Clojure Web Admin' - React-related projects in ClojureScript]]></title>
    <link href="http://blog.kidzhou.me/blog/2016/01/25/clojure-practice-in-clojure-web-admin-react-in-clojurescript/"/>
    <updated>2016-01-25T22:15:12+13:00</updated>
    <id>http://blog.kidzhou.me/blog/2016/01/25/clojure-practice-in-clojure-web-admin-react-in-clojurescript</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/b1412/clojure-web-admin">CWA</a>(Clojure Web Admin) uses React and Bootstrap3  as a view layer with Reagent &amp; Re-frame.</p>

<p>All the projects used in CWA are shwon as bellow:</p>

<ul>
<li><p><a href="https://reagent-project.github.io/index.html" title="https://reagent-project.github.io/index.html">Reagent</a></p>

<p>Reagent provides a minimalistic interface between ClojureScript and React.</p></li>
<li><p><a href="https://github.com/Day8/re-frame" title="https://github.com/Day8/re-frame">Re-frame</a></p>

<p> Re-frame is a pattern for writing SPAs in ClojureScript, using Reagent with workflow as bellow:</p></li>
</ul>


<pre><code>app-db  --&gt;  components  --&gt;  Hiccup  --&gt;  Reagent  --&gt;  VDOM  --&gt;  React  --&gt;  DOM
 ^                                                                              |
 |                                                                              v
 handlers &lt;-----  router  &lt;-----------------------  (dispatch [event-id  event params])
</code></pre>

<ul>
<li><p><a href="https://react-bootstrap.github.io" title="https://react-bootstrap.github.io">React-Bootstrap</a></p>

<p>  Bootstrap 3 components built with React.</p></li>
<li><p><a href="https://github.com/reagent-project/reagent-forms" title="https://github.com/reagent-project/reagent-forms">Reagent-forms</a></p>

<p> A ClojureScript library to provide form data bindings for Reagent.
 In CWA, we have create some high-level abstract field types to make your life easier including Image ,Attachment, Enum, Lookup,etc.</p></li>
</ul>


<pre><code class="clojurescript">(defmethod init-field :image
  [[_ {:keys [field id] :as attrs} :as component] {:keys [doc] :as opts}]
  (let [upload-path (reagent/atom
                     ((keyword (str (name id) ".path")) @doc))]
    (fn []
      [:div.form-group
            [:img {:src @upload-path :class "img-responsive"}]
            [show-on-click
             :trigger
             [Button {:bs-style "primary"}
              [FaIcon "upload"] ]
             :body [file-form
                    :image upload-path
                    :column-name id
                    :form-data doc]]])))

(defmethod bind :image
  [{:keys [field id fmt]} {:keys [get save! doc]}]
  {:value (let [value (or (get id) "")]
            value)
   :on-change #(save! id (-&gt;&gt; % (value-of) (format-type field)))})
</code></pre>

<p>ClojureScript is basicly the same as Clojure, functional concepts in ClojureScript are a very good match for React&rsquo;s vision of components and immutability. And reagent could be your good choice to use React as a view layer in ClojureScript</p>

<p>Recently Bootstrap has been the bread and butter of rapid web prototyping, we better  make most of the Bootstrap ecosystem. Funtunately, React-Bootstrap has rewritten most Bootstrap components with React. In addition, we can easily wrap the react-bootstrap with Reagent and have access to all the goodies and  we can wrap any other js libraries as well.</p>

<pre><code class="clojurescript">(def Button (reagent.core/adapt-react-class (aget js/ReactBootstrap "Button")))
(def TreeView (reagent.core/adapt-react-class js/TreeView))
</code></pre>

<p>With all the projects metioned above,front-end programming could become straightforward and fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure practice in 'Clojure Web Admin' - Incremental updates]]></title>
    <link href="http://blog.kidzhou.me/blog/2015/12/29/incremental-updates/"/>
    <updated>2015-12-29T04:14:12+13:00</updated>
    <id>http://blog.kidzhou.me/blog/2015/12/29/incremental-updates</id>
    <content type="html"><![CDATA[<p>When assign resources to a role, multiple resources should be edited in one http request.</p>

<p>In back-end, we must tell  the new role-resources to create, the exist role-resources to update and the unuse role-resources to delete, which  could make create functiontoo complex.Acturally,it is a incremental updates solution, in <a href="">Clojure Web Admin</a> we add fingerprint column in tables in which need ã€‚ Besides, fingerprint can be used in big data update.</p>

<p>When using fingerprint, time of creating would increase due to the time of  fingerprint calculation, however time of updating would decrease because it only compare fingerprint not all the columns.</p>

<!--more-->


<pre><code class="clojure">(defn assign-resources-to-role
  "Renew the permissions of the role:
     1 Get all the resources of current role.
     2 Delete the resources whose id is not in  params.
     3 Update the scope whose id is in db-resources  but scope is different.
     4 Create new resources in parmas whose id is not in the resources  for the role
  "
  [id param]
  (let [param (dissoc param :current-user :s-scope)
        db-ress (-&gt;&gt; (-&gt; (k/select* role-resource)
                         (k/where {:role_id id})
                         (k/select))
                     (map (juxt :resource-id :scope)))
        db-ids (-&gt;&gt; db-ress
                    (map (fn [[r-id s]] r-id))
                    (set))
        param-ids (-&gt;&gt; param
                       (map (fn [[r-id s]] (Integer/parseInt r-id)))
                       (set))
        del-data  (-&gt;&gt; db-ress
                       (remove (fn [[r-id s]] (param-ids r-id))))
        exist-data (-&gt;&gt; param
                        (filter (fn [[r-id s]]
                                  (let [curr (-&gt;&gt; db-ress
                                                  (filter (fn [[db-r-id db-s]]
                                                            (= (Integer/parseInt r-id) db-r-id)))
                                                  (first))]
                                    (and (db-ids (Integer/parseInt r-id))
                                         (not= s (second curr)) )))))
        new-data (-&gt;&gt; param
                      (remove (fn [[r-id s]] (db-ids (Integer/parseInt r-id)))))]
    (-&gt;&gt; del-data
         (map (fn [[r-id s]] (-&gt; (k/delete* role-resource)
                                 (k/where {:role_id id :resource_id r-id :scope s})
                                 (k/delete))))
         (doall))

    (-&gt;&gt; new-data
         (map (fn [[r-id s]] [:resource-id r-id :scope s :role-id id]))
         (doall)
         (map (partial apply hash-map))
         (#(-&gt; (k/insert* role-resource)
               (k/values %)
               (k/insert))))

    (-&gt;&gt; exist-data
         (map (fn [[r-id s]]
                (-&gt; (k/update* role-resource)
                    (k/set-fields {:scope s})
                    (k/where {:role_id id
                              :resource_id r-id})
                    (k/update))))
         (doall))))
</code></pre>

<pre><code class="clojure">(defn assign-resources-to-role
  [id param]
  (fingerprint/init! role-resource {:role_id id})
  (-&gt;&gt; (dissoc param :current-user :s-scope)
       (map (fn [[res-id s]] {:resource-id res-id :scope s :role-id id}))
       (map (partial create-entity role-resource))
       (doall))
  (fingerprint/remove-expired! role-resource))
</code></pre>

<p>Import code snippets in <code>create-entity</code>, see complete code <a href="https://github.com/b1412/clojure-web-admin/blob/master/src/clj/clojure_web/common/crud.clj#L214">here</a></p>

<p>If this entity has fingerprint column, invoke create function in fingerprint.clj, otherwise call Korma directly.
```clojure
(defn create-entity [entity params]
  (log/debug  &ldquo;create &rdquo; (:name entity) &ldquo;  &rdquo; params)
  (let [ create (fn<a href="->%20(k/insert*%20entity">params</a>
                     (k/values params)
                     (k/insert)))]</p>

<pre><code>(if (contains-column? entity :fingerprint)
  (fingerprint/create entity params create)
  (create params))))
</code></pre>

<p>```</p>

<p>For example</p>

<p><img src="/images/role-resources-before.png" alt="DNS configuration" /></p>

<p><img src="/images/role-resources-after.png" alt="DNS configuration" /></p>

<h2>Scenario</h2>

<h2>Solution</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure practice in 'Clojure Web Admin' - Dasherize Korma]]></title>
    <link href="http://blog.kidzhou.me/blog/2015/12/29/dasherize-korma/"/>
    <updated>2015-12-29T03:23:19+13:00</updated>
    <id>http://blog.kidzhou.me/blog/2015/12/29/dasherize-korma</id>
    <content type="html"><![CDATA[<p>By default, Korma follows database convention using underscores  while Clojurians prefer kebab-case(lisp-case).</p>

<p>In this post, the function/macro used in <a href="https://github.com/b1412/clojure-web-admin" title="https://github.com/b1412/clojure-web-admin">Clojure Web Admin</a> are dasherized by
<a href="https://clojuredocs.org/clojure.core/alter-var-root" title="https://clojuredocs.org/clojure.core/alter-var-root"><code>alert-var-root</code></a></p>

<p>For others functions/macros, it could be done by code snippets in this post with minor changes.</p>

<p>Code in this post is <a href="https://gist.github.com/b1412/f5d90e604a72ef88318f" title="https://gist.github.com/b1412/f5d90e604a72ef88318f">here</a></p>

<!--more-->


<h2>defentity &amp; select &amp;  insert</h2>

<pre><code class="clojure">(def table-&gt;entity (atom {}))

(def underscore-kw (comp keyword #(clojure.string/replace % "-" "_") name))

(def dasherize-kw  (comp keyword #(clojure.string/replace % "_" "-") name))

(def map-keys (fn [f m] (reduce-kv #(assoc %1 (f %2) %3) {} m)))

(defmacro defent [table &amp; body]
  `(do (declare ~table)
       (defentity ~table
         (prepare   (partial map-keys underscore-kw))
         (transform (partial map-keys dasherize-kw))
         (table (-&gt; (:name (meta (var ~table)))
                      (clojure.string/replace #"-" "_")
                      (keyword))))))
</code></pre>

<pre><code class="clojure">;;; Map  the table 'role_resource' in DB, get rid of `(table :role-resource :role_resource)`
(defent role-resource)

;;; Use kebab-case in where conditon and get column names with kebab-case keyword.
(select role-resource (limit 1))

; =&gt;({:id 1, :role-id 1, :resource-id 1, :scope "system", :valid "yes", :fingerprint "f465893674d0f121bddb96698d6c55b5"})
</code></pre>

<h2>where</h2>

<pre><code class="clojure">(alter-var-root
 (var k/where*)
 (fn [f]
   #(f %1
       (walk/prewalk
        (fn [e]
          (if (:korma.sql.utils/generated e)
            (update e :korma.sql.utils/generated
                    (fn [k] (str/replace k "-" "_")))
            e)) %2))))
</code></pre>

<pre><code>;;; Use kebab-case column names in where conditon
(select role-resource (where {:role-id 2}) (limit 1))
; =&gt;({:id 72, :role-id 2, :resource-id 58, :scope "org", :valid "yes", :fingerprint "f20bafaae6285a3443cb6710421da306"})
</code></pre>

<h2>References</h2>

<ul>
<li><a href="http://camdez.com/blog/2015/07/21/dasherize-korma-columns">http://camdez.com/blog/2015/07/21/dasherize-korma-columns</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
